#! /usr/bin/env python

#
# Determine the input resistance and input time constant
# from the f/I traces; specifically, from the first trace,
# which is a hyperpolarization.
#

import sys, re, string


#
# Constants.
#

start_time = string.atof(sys.argv[1])  # Time at which current starts.
ss_time    = start_time + 0.8  # Time at which Vm has reached a steady state.


#
# Compile regexes.
#

np    = re.compile('/newplot')
slash = re.compile('/')

#
# Read until you get to the second "/newplot".
#

newplotcount = 0
trace = []

while 1:
    line = sys.stdin.readline()
    if not line:
        break

    if np.match(line):
        newplotcount = newplotcount + 1
        if newplotcount > 1:
            break
    elif slash.match(line):   # Get rid of / directives.
        pass
    else:
        trace.append(line)

#
# Determine the input resistance.  Compare initial Vm to Vm at 1.0 seconds
# of hyperpolarization to get delta-V.
#

Iin   = 0.1e-9
tiny  = 1.0e-8

for line in trace:
    words = string.split(line)
    time  = string.atof(words[0])

    # Take the voltage 1 msec before start_time as the baseline voltage.

    if abs(time - (start_time - 0.001)) <= tiny:
        start = string.atof(words[1])  # Starting value of Vm.

    if abs(time - ss_time) <= tiny:
        end = string.atof(words[1])  # Should be steady-state value of Vm.
        break

#print "\nStart = %f V  End = %f V  Input current = %g nA\n" % (start, end, Iin)

delta_V = abs(end - start)

#print "Delta V = %f V\n" % delta_V

Rin = delta_V / Iin

print "\n%% Input resistance: %.0f Megohms\n" % (Rin / 1000000.0)



#
# Determine the input time constant.  This will be the time at which the
# trace crosses over its 1/e point.  This is very crude.
#

import math
target = end + (math.exp(-1.0) * delta_V)

#print "1/e point: %g V\n" % target

for line in trace:
    words = string.split(line)
    time  = string.atof(words[0])
    val   = string.atof(words[1])

    if val < target and time > start_time:
        tc = time - start_time
        print "%% Input time constant: %g msec\n" % (tc * 1000)
        break
else:
    print "Error: input time constant can't be determined!"







