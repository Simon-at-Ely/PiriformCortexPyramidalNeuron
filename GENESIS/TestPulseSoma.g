//  ******************************************************
// 
//     Based on file generated by: neuroConstruct v1.6.1
// 
//  ******************************************************


//   Including external files

include compartments 

//   Creating element for channel prototypes




//   Including channel mechanisms 
//   

include model5.channels

make_channel_library

float EREST_ACT = -0.0594


create neutral /cells


create neutral /cells/CellGroup_2


str compName

readcell model5_soma.p /cells/CellGroup_2/CellGroup_2_0

echo "Read in cell!"



//////////////////////////////////////////////////////////////////////
//   Adding 1 stimulation(s)
//////////////////////////////////////////////////////////////////////

create neutral /stim
create neutral /stim/pulse
create pulsegen /stim/pulse/stim_Input_1_CellGroup_2_0

//   Adding a current pulse of amplitude: 5.0E-9 A, SingleElectricalInput: [Input: IClamp, cellGroup: CellGroup_2, cellNumber: 0, segmentId: 0, fractionAlong: 0.5]

//   Pulses are shifted one dt step, so that pulse will begin at delay1, as in NEURON

setfield ^ level1 5.0E-9 width1 5.0E-4 delay1 0.01999 delay2 10000.0  
addmsg /stim/pulse/stim_Input_1_CellGroup_2_0 /cells/CellGroup_2/CellGroup_2_0/soma INJECT output


//////////////////////////////////////////////////////////////////////
//   Crank-Nicholson num integration method (11), using hsolve: true, chanmode: 0
//////////////////////////////////////////////////////////////////////

echo "----------- Specifying hsolve"

str cellName
foreach cellName ({el /cells/#/#})
    create hsolve {cellName}/solve
    setfield {cellName}/solve path {cellName}/#[][TYPE=compartment],{cellName}/#[][TYPE=symcompartment] comptmode 1
    setmethod {cellName}/solve 11
    setfield {cellName}/solve chanmode 0
    call {cellName}/solve SETUP
    reset
end
reset
echo "-----------Done specifying hsolve "


//////////////////////////////////////////////////////////////////////
//   Settings for running the demo
//////////////////////////////////////////////////////////////////////


float dt = 1.0E-5
float duration = 0.05
int steps =  {round {{duration}/{dt}}}

setclock 0 {dt} // Units[GENESIS_SI_time, symbol: s]

//////////////////////////////////////////////////////////////////////
//   Adding 8 plot(s)
//////////////////////////////////////////////////////////////////////

create neutral /plots


create xform /plots/CellGroup_2_v [500,100,400,400]  -title "Values of VOLTAGE (Vm) in /cells/CellGroup_2/CellGroup_2_0: Sim_54"
xshow /plots/CellGroup_2_v
create xgraph /plots/CellGroup_2_v/graph -xmin 0 -xmax {duration} -ymin -0.09 -ymax 0.05
addmsg /cells/CellGroup_2/CellGroup_2_0/soma /plots/CellGroup_2_v/graph PLOT Vm *...p_2/CellGroup_2_0_Soma:Vm *black

create xform /plots/GraphWin_1 [500,100,400,400]  -title "Values of Na:X (X) in /cells/CellGroup_2/CellGroup_2_0: Sim_54"
xshow /plots/GraphWin_1
create xgraph /plots/GraphWin_1/graph -xmin 0 -xmax {duration} -ymin 0.0 -ymax 1.0
addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Na /plots/GraphWin_1/graph PLOT X *...0/soma_Na:X *black
addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Na /plots/GraphWin_1/graph PLOT Y *...0/soma_Na:Y *blue

addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Ca /plots/GraphWin_1/graph PLOT X *...p_2_0/soma_Ca:X *red
addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Ca /plots/GraphWin_1/graph PLOT Y *...p_2_0/soma_Ca:Y *orange

addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Ka /plots/GraphWin_1/graph PLOT X *...0/soma_Ka:X *pink
addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Ka /plots/GraphWin_1/graph PLOT Y *...0/soma_Ka:Y *brown



/*

create xform /plots/GraphWin_8 [500,100,400,400]  -title "Values of Olfactory_Ca:Y (Y) in /cells/CellGroup_2/CellGroup_2_0: Sim_54"

create xgraph /plots/GraphWin_8/graph -xmin 0 -xmax {duration} -ymin 0.0 -ymax 1.0
addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Olfactory_Ca /plots/GraphWin_8/graph PLOT Y *...p_2_0/Soma_Olfactory_Ca:Y *black

create xform /plots/GraphWin_2 [500,100,400,400]  -title "Values of Na_Hipo_original:Y (Y) in /cells/CellGroup_2/CellGroup_2_0: Sim_54"

create xgraph /plots/GraphWin_2/graph -xmin 0 -xmax {duration} -ymin 0.0 -ymax 1.0
addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Na_Hipo_original /plots/GraphWin_2/graph PLOT Y *...0/Soma_Na_Hipo_original:Y *black

create xform /plots/GraphWin_3 [500,100,400,400]  -title "Values of KDR_Hipo_original:X (X) in /cells/CellGroup_2/CellGroup_2_0: Sim_54"

create xgraph /plots/GraphWin_3/graph -xmin 0 -xmax {duration} -ymin 0.0 -ymax 1.0
addmsg /cells/CellGroup_2/CellGroup_2_0/soma/KDR_Hipo_original /plots/GraphWin_3/graph PLOT X *.../Soma_KDR_Hipo_original:X *black

create xform /plots/GraphWin_4 [500,100,400,400]  -title "Values of Piriform_KA_original:X (X) in /cells/CellGroup_2/CellGroup_2_0: Sim_54"

create xgraph /plots/GraphWin_4/graph -xmin 0 -xmax {duration} -ymin 0.0 -ymax 1.0
addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Piriform_KA_original /plots/GraphWin_4/graph PLOT X *...ma_Piriform_KA_original:X *black

create xform /plots/GraphWin_5 [500,100,400,400]  -title "Values of Piriform_KA_original:Y (Y) in /cells/CellGroup_2/CellGroup_2_0: Sim_54"
xshow /plots/GraphWin_5
create xgraph /plots/GraphWin_5/graph -xmin 0 -xmax {duration} -ymin 0.0 -ymax 1.0
addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Piriform_KA_original /plots/GraphWin_5/graph PLOT Y *...ma_Piriform_KA_original:Y *black
*/

//////////////////////////////////////////////////////////////////////
//   Creating a simple Run Control
//////////////////////////////////////////////////////////////////////

if (!{exists /controls})
    create neutral /controls
end
create xform /controls/runControl [700, 20, 200, 140] -title "Run Controls: Sim_54"
xshow /controls/runControl

create xbutton /controls/runControl/RESET -script reset
str rerun
rerun = { strcat "step " {steps} }
create xbutton /controls/runControl/RUN -script {rerun}
create xbutton /controls/runControl/STOP -script stop

create xbutton /controls/runControl/QUIT -script quit


echo Checking and resetting...

maxwarnings 400

//////////////////////////////////////////////////////////////////////
//   Recording 8 variable(s)
//////////////////////////////////////////////////////////////////////


//   Single simulation run...

reset

str targetDir
targetDir =  "./"

echo
echo
echo     Preparing recording of cell parameters
echo
echo

create neutral /fileout
str cellName
str compName
create neutral /fileout/cells
echo Created: /fileout/cells


//   Saving VOLTAGE on only one seg, id: 0, in the only cell in CellGroup_2

if (!{exists /fileout/cells/CellGroup_2})
    create neutral /fileout/cells/CellGroup_2
end

foreach cellName ({el /cells/CellGroup_2/#})
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

    ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

    compName = {strcat {cellName} /soma}
    str fileNameStr
    fileNameStr = {strcat {getpath {cellName} -tail} {".dat"} }
    create asc_file /fileout{compName}VOLTAGE
    setfield /fileout{compName}VOLTAGE    flush 1    leave_open 1    append 1 notime 1
    setfield /fileout{compName}VOLTAGE filename {strcat {targetDir} {fileNameStr}}
    
    addmsg {cellName}/soma /fileout{compName}VOLTAGE SAVE Vm  //  ..
    call /fileout{compName}VOLTAGE OUT_OPEN
    call /fileout{compName}VOLTAGE OUT_WRITE {getfield {cellName}/soma Vm}

end

/*
//   Saving Na_Hipo_original:X on only one seg, id: 0, in only cell: 0 in CellGroup_2

if (!{exists /fileout/cells/CellGroup_2})
    create neutral /fileout/cells/CellGroup_2
end

//   Recording cell: /cells/CellGroup_2/CellGroup_2_0

cellName = "/cells/CellGroup_2/CellGroup_2_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Na_Hipo_original_X.dat"} }
create asc_file /fileout{compName}Na_Hipo_original_X
setfield /fileout{compName}Na_Hipo_original_X    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Na_Hipo_original_X filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Na_Hipo_original /fileout{compName}Na_Hipo_original_X SAVE X
call /fileout{compName}Na_Hipo_original_X OUT_OPEN
call /fileout{compName}Na_Hipo_original_X OUT_WRITE {getfield /cells/CellGroup_2/CellGroup_2_0/soma/Na_Hipo_original X}

//   Saving Olfactory_Ca:X on only one seg, id: 0, in only cell: 0 in CellGroup_2

if (!{exists /fileout/cells/CellGroup_2})
    create neutral /fileout/cells/CellGroup_2
end

//   Recording cell: /cells/CellGroup_2/CellGroup_2_0

cellName = "/cells/CellGroup_2/CellGroup_2_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Olfactory_Ca_X.dat"} }
create asc_file /fileout{compName}Olfactory_Ca_X
setfield /fileout{compName}Olfactory_Ca_X    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Olfactory_Ca_X filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Olfactory_Ca /fileout{compName}Olfactory_Ca_X SAVE X
call /fileout{compName}Olfactory_Ca_X OUT_OPEN
call /fileout{compName}Olfactory_Ca_X OUT_WRITE {getfield /cells/CellGroup_2/CellGroup_2_0/soma/Olfactory_Ca X}

//   Saving Olfactory_Ca:Y on only one seg, id: 0, in only cell: 0 in CellGroup_2

if (!{exists /fileout/cells/CellGroup_2})
    create neutral /fileout/cells/CellGroup_2
end

//   Recording cell: /cells/CellGroup_2/CellGroup_2_0

cellName = "/cells/CellGroup_2/CellGroup_2_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Olfactory_Ca_Y.dat"} }
create asc_file /fileout{compName}Olfactory_Ca_Y
setfield /fileout{compName}Olfactory_Ca_Y    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Olfactory_Ca_Y filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Olfactory_Ca /fileout{compName}Olfactory_Ca_Y SAVE Y
call /fileout{compName}Olfactory_Ca_Y OUT_OPEN
call /fileout{compName}Olfactory_Ca_Y OUT_WRITE {getfield /cells/CellGroup_2/CellGroup_2_0/soma/Olfactory_Ca Y}

//   Saving Na_Hipo_original:Y on only one seg, id: 0, in only cell: 0 in CellGroup_2

if (!{exists /fileout/cells/CellGroup_2})
    create neutral /fileout/cells/CellGroup_2
end

//   Recording cell: /cells/CellGroup_2/CellGroup_2_0

cellName = "/cells/CellGroup_2/CellGroup_2_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Na_Hipo_original_Y.dat"} }
create asc_file /fileout{compName}Na_Hipo_original_Y
setfield /fileout{compName}Na_Hipo_original_Y    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Na_Hipo_original_Y filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Na_Hipo_original /fileout{compName}Na_Hipo_original_Y SAVE Y
call /fileout{compName}Na_Hipo_original_Y OUT_OPEN
call /fileout{compName}Na_Hipo_original_Y OUT_WRITE {getfield /cells/CellGroup_2/CellGroup_2_0/soma/Na_Hipo_original Y}

//   Saving KDR_Hipo_original:X on only one seg, id: 0, in only cell: 0 in CellGroup_2

if (!{exists /fileout/cells/CellGroup_2})
    create neutral /fileout/cells/CellGroup_2
end

//   Recording cell: /cells/CellGroup_2/CellGroup_2_0

cellName = "/cells/CellGroup_2/CellGroup_2_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".KDR_Hipo_original_X.dat"} }
create asc_file /fileout{compName}KDR_Hipo_original_X
setfield /fileout{compName}KDR_Hipo_original_X    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}KDR_Hipo_original_X filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_2/CellGroup_2_0/soma/KDR_Hipo_original /fileout{compName}KDR_Hipo_original_X SAVE X
call /fileout{compName}KDR_Hipo_original_X OUT_OPEN
call /fileout{compName}KDR_Hipo_original_X OUT_WRITE {getfield /cells/CellGroup_2/CellGroup_2_0/soma/KDR_Hipo_original X}

//   Saving Piriform_KA_original:X on only one seg, id: 0, in only cell: 0 in CellGroup_2

if (!{exists /fileout/cells/CellGroup_2})
    create neutral /fileout/cells/CellGroup_2
end

//   Recording cell: /cells/CellGroup_2/CellGroup_2_0

cellName = "/cells/CellGroup_2/CellGroup_2_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Piriform_KA_original_X.dat"} }
create asc_file /fileout{compName}Piriform_KA_original_X
setfield /fileout{compName}Piriform_KA_original_X    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Piriform_KA_original_X filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Piriform_KA_original /fileout{compName}Piriform_KA_original_X SAVE X
call /fileout{compName}Piriform_KA_original_X OUT_OPEN
call /fileout{compName}Piriform_KA_original_X OUT_WRITE {getfield /cells/CellGroup_2/CellGroup_2_0/soma/Piriform_KA_original X}

//   Saving Piriform_KA_original:Y on only one seg, id: 0, in only cell: 0 in CellGroup_2

if (!{exists /fileout/cells/CellGroup_2})
    create neutral /fileout/cells/CellGroup_2
end

//   Recording cell: /cells/CellGroup_2/CellGroup_2_0

cellName = "/cells/CellGroup_2/CellGroup_2_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Piriform_KA_original_Y.dat"} }
create asc_file /fileout{compName}Piriform_KA_original_Y
setfield /fileout{compName}Piriform_KA_original_Y    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Piriform_KA_original_Y filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_2/CellGroup_2_0/soma/Piriform_KA_original /fileout{compName}Piriform_KA_original_Y SAVE Y
call /fileout{compName}Piriform_KA_original_Y OUT_OPEN
call /fileout{compName}Piriform_KA_original_Y OUT_WRITE {getfield /cells/CellGroup_2/CellGroup_2_0/soma/Piriform_KA_original Y}
*/

//////////////////////////////////////////////////////////////////////
//   This will run a full simulation when the file is executed
//////////////////////////////////////////////////////////////////////

reset
str startTimeFile
str stopTimeFile
startTimeFile = {strcat {targetDir} {"starttime"}}
stopTimeFile = {strcat {targetDir} {"stoptime"}}
sh {strcat {"date +%s.%N > "} {startTimeFile}}

echo Starting sim: Sim_54 on {genesisCore} with dur: {duration} dt: {dt} and steps: {steps} (Crank-Nicholson num integration method (11), using hsolve: true, chanmode: 0)
date +%F__%T__%N
step {steps}

echo Finished simulation reference: Sim_54
date +%F__%T__%N
echo Data stored in directory: {targetDir}

//   This will ensure the data files don't get written to again..


str fileElement
foreach fileElement ({el /fileout/cells/##[][TYPE=asc_file]})
end
foreach fileElement ({el /fileout/cells/##[][TYPE=event_tofile]})
    echo Closing {fileElement}

    call {fileElement} CLOSE
end

//   Saving file containing time details

float i, timeAtStep
create asc_file /fileout/timefile
setfield /fileout/timefile    flush 1    leave_open 1    append 1  notime 1
setfield /fileout/timefile filename {strcat {targetDir} {"time.dat"}}
call /fileout/timefile OUT_OPEN
for (i = 0; i <= {steps}; i = i + 1)
    timeAtStep = {dt} * i
    call /fileout/timefile OUT_WRITE {timeAtStep} 
end

call /fileout/timefile FLUSH


sh {strcat {"date +%s.%N > "} {stopTimeFile}}

openfile {startTimeFile} r
openfile {stopTimeFile} r
float starttime = {readfile {startTimeFile}}  
float stoptime =  {readfile {stopTimeFile}}  
float runTime = {stoptime - starttime}  
echo Simulation took : {runTime} seconds  
closefile {startTimeFile} 
closefile {stopTimeFile} 
