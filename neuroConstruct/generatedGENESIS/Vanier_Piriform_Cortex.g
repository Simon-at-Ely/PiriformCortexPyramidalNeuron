//  ******************************************************
// 
//     File generated by: neuroConstruct v1.7.0
// 
//  ******************************************************

echo ""
echo "*****************************************************"
echo ""
echo "    neuroConstruct generated GENESIS simulation"
echo "    for project: /home/Simon/PiriformCortexPyramidalNeuron/neuroConstruct/Vanier_Piriform_Cortex.ncx"
echo ""
echo "    Description: "

echo "    Simulation configuration: Default Simulation Configuration"
echo "    Simulation reference: Sim_99"
echo " "
echo  "*****************************************************"



//   Initializes random-number generator

randseed 1696886239

//   This temperature is needed if any of the channels are temp dependent (Q10 dependence) 
//   

float celsius = 6.3

str units = "GENESIS SI Units"

str genesisCore = "GENESIS2"


//   Including neuroConstruct utilities file

include nCtools 

//   Including external files

include compartments 

//   Creating element for channel prototypes

if (!{exists /library})
    create neutral /library
end

disable /library
pushe /library
make_cylind_compartment
make_cylind_symcompartment
pope

env // prints details on some global variables



//   Including channel mechanisms 
//   

include KCa_1
make_KCa_1

include LeakConductance
make_LeakConductance

include Olfactory_Ca
make_Olfactory_Ca

include Ca_buffer
make_Ca_buffer

include Ca_buffer_ChannelML
make_Ca_buffer_ChannelML

include Kahp1_ChannelML
make_Kahp1_ChannelML

include Olfactory_Ca_ChannelML
make_Olfactory_Ca_ChannelML


//   Including synaptic mech 
//   



create neutral /cells

//////////////////////////////////////////////////////////////////////
//   Cell group 0: CellGroup_5 has cells of type: Pyramidal_Neuron_original_soma_onechannel
//////////////////////////////////////////////////////////////////////


create neutral /cells/CellGroup_5
//   Adding cells of type Pyramidal_Neuron_original_soma_onechannel in region Regions_1

//   Placing these cells in a region described by: Rectangular Box from point: (0.0, 0.0, 0.0) to (120.0, 50.0, 120.0)

//   Packing has been generated by: Random: num: 1, edge: 1, overlap: 1, other overlap: 1


str compName

readcell /home/Simon/PiriformCortexPyramidalNeuron/neuroConstruct/simulations/Sim_99/Pyramidal_Neuron_original_soma_onechannel.p /cells/CellGroup_5/CellGroup_5_0
addfield /cells/CellGroup_5/CellGroup_5_0 celltype
setfield /cells/CellGroup_5/CellGroup_5_0 celltype Pyramidal_Neuron_original_soma_onechannel

position /cells/CellGroup_5/CellGroup_5_0 1.025164E-4 2.04627E-5 1.037027E-5


//////////////////////////////////////////////////////////////////////
//   Cell group 1: CellGroup_6 has cells of type: Pyramidal_Neuron_ChannelML_soma_onechannel
//////////////////////////////////////////////////////////////////////


create neutral /cells/CellGroup_6
//   Adding cells of type Pyramidal_Neuron_ChannelML_soma_onechannel in region Regions_1

//   Placing these cells in a region described by: Rectangular Box from point: (0.0, 0.0, 0.0) to (120.0, 50.0, 120.0)

//   Packing has been generated by: Random: num: 1, edge: 1, overlap: 1, other overlap: 1


str compName

readcell /home/Simon/PiriformCortexPyramidalNeuron/neuroConstruct/simulations/Sim_99/Pyramidal_Neuron_ChannelML_soma_onechannel.p /cells/CellGroup_6/CellGroup_6_0
addfield /cells/CellGroup_6/CellGroup_6_0 celltype
setfield /cells/CellGroup_6/CellGroup_6_0 celltype Pyramidal_Neuron_ChannelML_soma_onechannel

position /cells/CellGroup_6/CellGroup_6_0 1.671165E-5 1.704456E-5 9.876669E-5

str tempCompName

str tempCellName

str tempChanName

//   The concentration of: ca has an effect on rate of [Kahp1_ChannelML]

foreach tempCompName ({el /cells/CellGroup_6/#/#})
    if ({exists  {tempCompName}/Ca_buffer_ChannelML})
        if ({exists  {tempCompName}/Kahp1_ChannelML})
            addmsg {tempCompName}/Ca_buffer_ChannelML {tempCompName}/Kahp1_ChannelML CONCEN Ca
        end
    end
end

//   Ion ca is transmitted by [Olfactory_Ca_ChannelML] affecting conc cell mechs: [Ca_buffer_ChannelML]

foreach tempCompName ({el /cells/CellGroup_6/#/#})
    if ({exists  {tempCompName}/Ca_buffer_ChannelML})
        if ({exists  {tempCompName}/Olfactory_Ca_ChannelML})
            addmsg {tempCompName}/Olfactory_Ca_ChannelML {tempCompName}/Ca_buffer_ChannelML I_Ca Ik
        end
    end
end



//////////////////////////////////////////////////////////////////////
//   Adding 4 stimulation(s)
//////////////////////////////////////////////////////////////////////

create neutral /stim
create neutral /stim/pulse
create neutral /stim/rndspike
create pulsegen /stim/pulse/stim_Input_6_CellGroup_6_0

//   Adding a current pulse of amplitude: 5.0E-10 A, SingleElectricalInput: [Input: IClamp, cellGroup: CellGroup_6, cellNumber: 0, segmentId: 0, fractionAlong: 0.5]

//   Pulses are shifted one dt step, so that pulse will begin at delay1, as in NEURON

setfield ^ level1 5.0E-10 width1 0.1 delay1 0.29999 delay2 10000.0  
addmsg /stim/pulse/stim_Input_6_CellGroup_6_0 /cells/CellGroup_6/CellGroup_6_0/Soma INJECT output

create pulsegen /stim/pulse/stim_Input_5_CellGroup_5_0

//   Adding a current pulse of amplitude: 5.0E-10 A, SingleElectricalInput: [Input: IClamp, cellGroup: CellGroup_5, cellNumber: 0, segmentId: 0, fractionAlong: 0.5]

//   Pulses are shifted one dt step, so that pulse will begin at delay1, as in NEURON

setfield ^ level1 5.0E-10 width1 0.1 delay1 0.29999 delay2 10000.0  
addmsg /stim/pulse/stim_Input_5_CellGroup_5_0 /cells/CellGroup_5/CellGroup_5_0/Soma INJECT output

create pulsegen /stim/pulse/stim_Input_4_CellGroup_6_0

//   Adding a current pulse of amplitude: -2.0E-10 A, SingleElectricalInput: [Input: IClamp, cellGroup: CellGroup_6, cellNumber: 0, segmentId: 0, fractionAlong: 0.5]

//   Pulses are shifted one dt step, so that pulse will begin at delay1, as in NEURON

setfield ^ level1 -2.0E-10 width1 0.1 delay1 0.09999 delay2 10000.0  
addmsg /stim/pulse/stim_Input_4_CellGroup_6_0 /cells/CellGroup_6/CellGroup_6_0/Soma INJECT output

create pulsegen /stim/pulse/stim_Input_3_CellGroup_5_0

//   Adding a current pulse of amplitude: -2.0E-10 A, SingleElectricalInput: [Input: IClamp, cellGroup: CellGroup_5, cellNumber: 0, segmentId: 0, fractionAlong: 0.5]

//   Pulses are shifted one dt step, so that pulse will begin at delay1, as in NEURON

setfield ^ level1 -2.0E-10 width1 0.1 delay1 0.09999 delay2 10000.0  
addmsg /stim/pulse/stim_Input_3_CellGroup_5_0 /cells/CellGroup_5/CellGroup_5_0/Soma INJECT output


//////////////////////////////////////////////////////////////////////
//   Crank-Nicholson num integration method (11), using hsolve: true, chanmode: 0
//////////////////////////////////////////////////////////////////////

echo "----------- Specifying hsolve"

str cellName
foreach cellName ({el /cells/#/#})
    create hsolve {cellName}/solve
    setfield {cellName}/solve path {cellName}/#[][TYPE=compartment],{cellName}/#[][TYPE=symcompartment] comptmode 1
    setmethod {cellName}/solve 11
    setfield {cellName}/solve chanmode 0
    call {cellName}/solve SETUP
    reset
end
reset
echo "-----------Done specifying hsolve "


//////////////////////////////////////////////////////////////////////
//   Settings for running the demo
//////////////////////////////////////////////////////////////////////


float dt = 1.0E-5
float duration = 0.6
int steps =  {round {{duration}/{dt}}}

setclock 0 {dt} // Units[GENESIS_SI_time, symbol: s]

//////////////////////////////////////////////////////////////////////
//   Adding 10 plot(s)
//////////////////////////////////////////////////////////////////////

create neutral /plots


create xform /plots/CellGroup_5_v [500,100,400,400]  -title "Values of VOLTAGE (Vm) in /cells/CellGroup_5/CellGroup_5_0: Sim_99"
xshow /plots/CellGroup_5_v
create xgraph /plots/CellGroup_5_v/graph -xmin 0 -xmax {duration} -ymin -0.09 -ymax 0.05
addmsg /cells/CellGroup_5/CellGroup_5_0/Soma /plots/CellGroup_5_v/graph PLOT Vm *...p_5/CellGroup_5_0_Soma:Vm *black
addmsg /cells/CellGroup_6/CellGroup_6_0/Soma /plots/CellGroup_5_v/graph PLOT Vm *...p_6/CellGroup_6_0_Soma:Vm *red

create xform /plots/GraphWin_1 [500,100,400,400]  -title "Values of Olfactory_Ca:X (X) in /cells/CellGroup_5/CellGroup_5_0: Sim_99"
xshow /plots/GraphWin_1
create xgraph /plots/GraphWin_1/graph -xmin 0 -xmax {duration} -ymin 0.0 -ymax 1.0
addmsg /cells/CellGroup_5/CellGroup_5_0/Soma/Olfactory_Ca /plots/GraphWin_1/graph PLOT X *...p_5_0/Soma_Olfactory_Ca:X *black
addmsg /cells/CellGroup_6/CellGroup_6_0/Soma/Olfactory_Ca_ChannelML /plots/GraphWin_1/graph PLOT X *..._Olfactory_Ca_ChannelML:X *red
addmsg /cells/CellGroup_5/CellGroup_5_0/Soma/Olfactory_Ca /plots/GraphWin_1/graph PLOT Y *...p_5_0/Soma_Olfactory_Ca:Y *blue
addmsg /cells/CellGroup_6/CellGroup_6_0/Soma/Olfactory_Ca_ChannelML /plots/GraphWin_1/graph PLOT Y *..._Olfactory_Ca_ChannelML:Y *green

create xform /plots/GraphWin_2 [500,100,400,400]  -title "Values of KCa_1:Z (Z) in /cells/CellGroup_5/CellGroup_5_0: Sim_99"
xshow /plots/GraphWin_2
create xgraph /plots/GraphWin_2/graph -xmin 0 -xmax {duration} -ymin 0.0 -ymax 1.0
addmsg /cells/CellGroup_5/CellGroup_5_0/Soma/KCa_1 /plots/GraphWin_2/graph PLOT Z *...ellGroup_5_0/Soma_KCa_1:Z *black
addmsg /cells/CellGroup_6/CellGroup_6_0/Soma/Kahp1_ChannelML /plots/GraphWin_2/graph PLOT Z *..._0/Soma_Kahp1_ChannelML:Z *red

create xform /plots/GraphWin_3 [500,100,400,400]  -title "Values of Ca_buffer:CONC:ca (Ca) in /cells/CellGroup_5/CellGroup_5_0: Sim_99"
xshow /plots/GraphWin_3
create xgraph /plots/GraphWin_3/graph -xmin 0 -xmax {duration} -ymin 0.0 -ymax 9.9999998E17
addmsg /cells/CellGroup_5/CellGroup_5_0/Soma/Ca_buffer /plots/GraphWin_3/graph PLOT Ca *...oup_5_0/Soma_Ca_buffer:Ca *black
addmsg /cells/CellGroup_6/CellGroup_6_0/Soma/Ca_buffer_ChannelML /plots/GraphWin_3/graph PLOT Ca *...ma_Ca_buffer_ChannelML:Ca *red


//////////////////////////////////////////////////////////////////////
//   Creating a simple Run Control
//////////////////////////////////////////////////////////////////////

if (!{exists /controls})
    create neutral /controls
end
create xform /controls/runControl [700, 20, 200, 140] -title "Run Controls: Sim_99"
xshow /controls/runControl

create xbutton /controls/runControl/RESET -script reset
str rerun
rerun = { strcat "step " {steps} }
create xbutton /controls/runControl/RUN -script {rerun}
create xbutton /controls/runControl/STOP -script stop

create xbutton /controls/runControl/QUIT -script quit


echo Checking and resetting...

maxwarnings 400

//////////////////////////////////////////////////////////////////////
//   Recording 10 variable(s)
//////////////////////////////////////////////////////////////////////


//   Single simulation run...

reset
str simsDir
simsDir = "/home/Simon/PiriformCortexPyramidalNeuron/neuroConstruct/simulations/"

str simReference
simReference = "Sim_99"

str targetDir
targetDir =  {strcat {simsDir} {simReference}}
targetDir =  {strcat {targetDir} {"/"}}

echo
echo
echo     Preparing recording of cell parameters
echo
echo

create neutral /fileout
str cellName
str compName
create neutral /fileout/cells
echo Created: /fileout/cells


//   Saving VOLTAGE on only one seg, id: 0, in the only cell in CellGroup_5

if (!{exists /fileout/cells/CellGroup_5})
    create neutral /fileout/cells/CellGroup_5
end

foreach cellName ({el /cells/CellGroup_5/#})
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

    ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

    compName = {strcat {cellName} /Soma}
    str fileNameStr
    fileNameStr = {strcat {getpath {cellName} -tail} {".dat"} }
    create asc_file /fileout{compName}VOLTAGE
    setfield /fileout{compName}VOLTAGE    flush 1    leave_open 1    append 1 notime 1
    setfield /fileout{compName}VOLTAGE filename {strcat {targetDir} {fileNameStr}}
    
    addmsg {cellName}/Soma /fileout{compName}VOLTAGE SAVE Vm  //  .. 
    call /fileout{compName}VOLTAGE OUT_OPEN
    call /fileout{compName}VOLTAGE OUT_WRITE {getfield {cellName}/Soma Vm}

end

//   Saving VOLTAGE on only one seg, id: 0, in the only cell in CellGroup_6

if (!{exists /fileout/cells/CellGroup_6})
    create neutral /fileout/cells/CellGroup_6
end

foreach cellName ({el /cells/CellGroup_6/#})
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

    ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

    compName = {strcat {cellName} /Soma}
    str fileNameStr
    fileNameStr = {strcat {getpath {cellName} -tail} {".dat"} }
    create asc_file /fileout{compName}VOLTAGE
    setfield /fileout{compName}VOLTAGE    flush 1    leave_open 1    append 1 notime 1
    setfield /fileout{compName}VOLTAGE filename {strcat {targetDir} {fileNameStr}}
    
    addmsg {cellName}/Soma /fileout{compName}VOLTAGE SAVE Vm  //  .. 
    call /fileout{compName}VOLTAGE OUT_OPEN
    call /fileout{compName}VOLTAGE OUT_WRITE {getfield {cellName}/Soma Vm}

end

//   Saving Olfactory_Ca:X on only one seg, id: 0, in only cell: 0 in CellGroup_5

if (!{exists /fileout/cells/CellGroup_5})
    create neutral /fileout/cells/CellGroup_5
end

//   Recording cell: /cells/CellGroup_5/CellGroup_5_0

cellName = "/cells/CellGroup_5/CellGroup_5_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Olfactory_Ca_X.dat"} }
create asc_file /fileout{compName}Olfactory_Ca_X
setfield /fileout{compName}Olfactory_Ca_X    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Olfactory_Ca_X filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_5/CellGroup_5_0/Soma/Olfactory_Ca /fileout{compName}Olfactory_Ca_X SAVE X
call /fileout{compName}Olfactory_Ca_X OUT_OPEN
call /fileout{compName}Olfactory_Ca_X OUT_WRITE {getfield /cells/CellGroup_5/CellGroup_5_0/Soma/Olfactory_Ca X}

//   Saving Olfactory_Ca_ChannelML:m on only one seg, id: 0, in only cell: 0 in CellGroup_6

if (!{exists /fileout/cells/CellGroup_6})
    create neutral /fileout/cells/CellGroup_6
end

//   Recording cell: /cells/CellGroup_6/CellGroup_6_0

cellName = "/cells/CellGroup_6/CellGroup_6_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Olfactory_Ca_ChannelML_m.dat"} }
create asc_file /fileout{compName}Olfactory_Ca_ChannelML_m
setfield /fileout{compName}Olfactory_Ca_ChannelML_m    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Olfactory_Ca_ChannelML_m filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_6/CellGroup_6_0/Soma/Olfactory_Ca_ChannelML /fileout{compName}Olfactory_Ca_ChannelML_m SAVE X
call /fileout{compName}Olfactory_Ca_ChannelML_m OUT_OPEN
call /fileout{compName}Olfactory_Ca_ChannelML_m OUT_WRITE {getfield /cells/CellGroup_6/CellGroup_6_0/Soma/Olfactory_Ca_ChannelML X}

//   Saving Olfactory_Ca:Y on only one seg, id: 0, in only cell: 0 in CellGroup_5

if (!{exists /fileout/cells/CellGroup_5})
    create neutral /fileout/cells/CellGroup_5
end

//   Recording cell: /cells/CellGroup_5/CellGroup_5_0

cellName = "/cells/CellGroup_5/CellGroup_5_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Olfactory_Ca_Y.dat"} }
create asc_file /fileout{compName}Olfactory_Ca_Y
setfield /fileout{compName}Olfactory_Ca_Y    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Olfactory_Ca_Y filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_5/CellGroup_5_0/Soma/Olfactory_Ca /fileout{compName}Olfactory_Ca_Y SAVE Y
call /fileout{compName}Olfactory_Ca_Y OUT_OPEN
call /fileout{compName}Olfactory_Ca_Y OUT_WRITE {getfield /cells/CellGroup_5/CellGroup_5_0/Soma/Olfactory_Ca Y}

//   Saving Olfactory_Ca_ChannelML:h on only one seg, id: 0, in only cell: 0 in CellGroup_6

if (!{exists /fileout/cells/CellGroup_6})
    create neutral /fileout/cells/CellGroup_6
end

//   Recording cell: /cells/CellGroup_6/CellGroup_6_0

cellName = "/cells/CellGroup_6/CellGroup_6_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Olfactory_Ca_ChannelML_h.dat"} }
create asc_file /fileout{compName}Olfactory_Ca_ChannelML_h
setfield /fileout{compName}Olfactory_Ca_ChannelML_h    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Olfactory_Ca_ChannelML_h filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_6/CellGroup_6_0/Soma/Olfactory_Ca_ChannelML /fileout{compName}Olfactory_Ca_ChannelML_h SAVE Y
call /fileout{compName}Olfactory_Ca_ChannelML_h OUT_OPEN
call /fileout{compName}Olfactory_Ca_ChannelML_h OUT_WRITE {getfield /cells/CellGroup_6/CellGroup_6_0/Soma/Olfactory_Ca_ChannelML Y}

//   Saving KCa_1:Z on only one seg, id: 0, in only cell: 0 in CellGroup_5

if (!{exists /fileout/cells/CellGroup_5})
    create neutral /fileout/cells/CellGroup_5
end

//   Recording cell: /cells/CellGroup_5/CellGroup_5_0

cellName = "/cells/CellGroup_5/CellGroup_5_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".KCa_1_Z.dat"} }
create asc_file /fileout{compName}KCa_1_Z
setfield /fileout{compName}KCa_1_Z    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}KCa_1_Z filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_5/CellGroup_5_0/Soma/KCa_1 /fileout{compName}KCa_1_Z SAVE Z
call /fileout{compName}KCa_1_Z OUT_OPEN
call /fileout{compName}KCa_1_Z OUT_WRITE {getfield /cells/CellGroup_5/CellGroup_5_0/Soma/KCa_1 Z}

//   Saving Kahp1_ChannelML:Z on only one seg, id: 0, in only cell: 0 in CellGroup_6

if (!{exists /fileout/cells/CellGroup_6})
    create neutral /fileout/cells/CellGroup_6
end

//   Recording cell: /cells/CellGroup_6/CellGroup_6_0

cellName = "/cells/CellGroup_6/CellGroup_6_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Kahp1_ChannelML_Z.dat"} }
create asc_file /fileout{compName}Kahp1_ChannelML_Z
setfield /fileout{compName}Kahp1_ChannelML_Z    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Kahp1_ChannelML_Z filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_6/CellGroup_6_0/Soma/Kahp1_ChannelML /fileout{compName}Kahp1_ChannelML_Z SAVE Z
call /fileout{compName}Kahp1_ChannelML_Z OUT_OPEN
call /fileout{compName}Kahp1_ChannelML_Z OUT_WRITE {getfield /cells/CellGroup_6/CellGroup_6_0/Soma/Kahp1_ChannelML Z}

//   Saving Ca_buffer:CONC:ca on only one seg, id: 0, in only cell: 0 in CellGroup_5

if (!{exists /fileout/cells/CellGroup_5})
    create neutral /fileout/cells/CellGroup_5
end

//   Recording cell: /cells/CellGroup_5/CellGroup_5_0

cellName = "/cells/CellGroup_5/CellGroup_5_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Ca_buffer_CONC_ca.dat"} }
create asc_file /fileout{compName}Ca_buffer_CONC_ca
setfield /fileout{compName}Ca_buffer_CONC_ca    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Ca_buffer_CONC_ca filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_5/CellGroup_5_0/Soma/Ca_buffer /fileout{compName}Ca_buffer_CONC_ca SAVE Ca
call /fileout{compName}Ca_buffer_CONC_ca OUT_OPEN
call /fileout{compName}Ca_buffer_CONC_ca OUT_WRITE {getfield /cells/CellGroup_5/CellGroup_5_0/Soma/Ca_buffer Ca}

//   Saving Ca_buffer_ChannelML:CONC:ca on only one seg, id: 0, in only cell: 0 in CellGroup_6

if (!{exists /fileout/cells/CellGroup_6})
    create neutral /fileout/cells/CellGroup_6
end

//   Recording cell: /cells/CellGroup_6/CellGroup_6_0

cellName = "/cells/CellGroup_6/CellGroup_6_0"
    if (!{exists /fileout{cellName}})
        create neutral /fileout{cellName}
    end

ce {cellName}

//   Recording at segInOrigCell: Soma (Id: 0), segInMappedCell: Soma, section: Soma, ID: 0, ROOT SEGMENT, rad: 5.2, (0.0, 0.0, 0.0) -> (0.0, 21.3, 0.0), len: 21.3 (FINITE VOLUME)

compName = {strcat {cellName} /Soma}
str fileNameStr
fileNameStr = {strcat {getpath {cellName} -tail} {".Ca_buffer_ChannelML_CONC_ca.dat"} }
create asc_file /fileout{compName}Ca_buffer_ChannelML_CONC_ca
setfield /fileout{compName}Ca_buffer_ChannelML_CONC_ca    flush 1    leave_open 1    append 1 notime 1
setfield /fileout{compName}Ca_buffer_ChannelML_CONC_ca filename { strcat  {targetDir} {fileNameStr}}
    addmsg /cells/CellGroup_6/CellGroup_6_0/Soma/Ca_buffer_ChannelML /fileout{compName}Ca_buffer_ChannelML_CONC_ca SAVE Ca
call /fileout{compName}Ca_buffer_ChannelML_CONC_ca OUT_OPEN
call /fileout{compName}Ca_buffer_ChannelML_CONC_ca OUT_WRITE {getfield /cells/CellGroup_6/CellGroup_6_0/Soma/Ca_buffer_ChannelML Ca}

//////////////////////////////////////////////////////////////////////
//   This will run a full simulation when the file is executed
//////////////////////////////////////////////////////////////////////

reset
str startTimeFile
str stopTimeFile
startTimeFile = {strcat {targetDir} {"starttime"}}
stopTimeFile = {strcat {targetDir} {"stoptime"}}
sh {strcat {"date +%s.%N > "} {startTimeFile}}

echo Starting sim: Sim_99 on {genesisCore} with dur: {duration} dt: {dt} and steps: {steps} (Crank-Nicholson num integration method (11), using hsolve: true, chanmode: 0)
date +%F__%T__%N
step {steps}

echo Finished simulation reference: Sim_99
date +%F__%T__%N
echo Data stored in directory: {targetDir}

//   This will ensure the data files don't get written to again..


str fileElement
foreach fileElement ({el /fileout/cells/##[][TYPE=asc_file]})
end
foreach fileElement ({el /fileout/cells/##[][TYPE=event_tofile]})
    echo Closing {fileElement}

    call {fileElement} CLOSE
end

//   Saving file containing time details

float i, timeAtStep
create asc_file /fileout/timefile
setfield /fileout/timefile    flush 1    leave_open 1    append 1  notime 1
setfield /fileout/timefile filename {strcat {targetDir} {"time.dat"}}
call /fileout/timefile OUT_OPEN
for (i = 0; i <= {steps}; i = i + 1)
    timeAtStep = {dt} * i
    call /fileout/timefile OUT_WRITE {timeAtStep} 
end

call /fileout/timefile FLUSH


sh {strcat {"date +%s.%N > "} {stopTimeFile}}

openfile {startTimeFile} r
openfile {stopTimeFile} r
float starttime = {readfile {startTimeFile}}  
float stoptime =  {readfile {stopTimeFile}}  
float runTime = {stoptime - starttime}  
echo Simulation took : {runTime} seconds  
closefile {startTimeFile} 
closefile {stopTimeFile} 


str hostnameFile
hostnameFile = {strcat {targetDir} {"hostname"}}
sh {strcat {"hostname > "} {hostnameFile}}
openfile {hostnameFile} r
str hostnamestr = {readfile {hostnameFile}}
closefile {hostnameFile}

str simPropsFile
simPropsFile = {strcat {targetDir} {"simulator.props"}}
openfile {simPropsFile} w
writefile {simPropsFile} "RealSimulationTime="{runTime}
writefile {simPropsFile} "Host="{hostnamestr}
closefile {simPropsFile} 
